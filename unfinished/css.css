// DISPLAY
div{
  display: inline; //An inline element does not start on a new line and only takes up as much width as necessary.
  display: block; //A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).
  visibility: hidden; // also hides an element. However, the element will still take up the same space as before. The element will be hidden, but still affect the layout
}

//POSITION
div {
  position: static; // default, Static positioned elements are not affected by the top, bottom, left, and right properties.which meens nggk bisa dikasi top, left, dll
  position: relative; //relative to its normal position. Bisa dikasi left, top, rught, dll
  position: absolute; // is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed). Bisa dikasi left, top, rught, dll
  position: fixed; //is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.

  //Elements are then positioned using the top, bottom, left, and right properties. However, these properties will not work unless the position property is set first. They also work differently depending on the position value.

  //position:relative adalah jenis position yang paling banyak digunakan. Memiliki sifat yang sama dengan position:static yang mengalir, akan tetapi perbedaannya position:relative ini bisa mengatur posisinya dengan bantuan property top, left, right, bottom. Patokan property keempat arah tersebut adalah item itu sendiri. Sehingga misalnya item dengan position:relative diberi property top:50px berarti memberikan jarak kosong 50px diatas item tersebut
  //position:absolute ini adalah jenis posisi yang fungsinya paling powerful. Berbeda dengan position:static dan position:relative yang terus mengalir,, position:absolute ini cenderung tidak mengisi ruangan seperti 2 position lainnya, dan diam ditempat jika beberapa tag dengan position:absolute ini berbarengan. Wajar saja, karena fungsi position:absolute sendiri adalah meletakkan item dengan posisi yang bisa diatur seenak jidat kita.. :D
  //Sama seperti position:relative, position:absolute ini dibarengi dengan property 4 arah (top, left, right, bottom). Akan tetapi bedanya kalau di position relative titik 0pxnya adalah item itu sendiri (lihat gambar diatas), sedangkan di position:absolute ini titik 0pxnya adalah layer yang bersifat container yang ada di parentnya, atau kalau tidak ada layer container sama sekali, maka pojokkan browser sendiri lah yang menjadi titik 0pxnya.

  //Secara teknis relative menjadi wadah untuk sebuah benda atau nilai lain dalam CSS dan absolute dapat memposisikan dirinya bebas pada wadah (relative).
}

//OVERFLOW (SCROLL)

//LAYOUT : FLOAT and CLEAR
  div{
    //float property specifies how an element should float.(left, right, none, inherit(its parent))
    //clear property specifies what elements can float beside the cleared element and on which side (left, right, none,both, inherit(its parent)).sisi mana yg harus clear, jika ada maka otomatis kebawah
  }
  //cara baru
  .clearfix::after {
  content: "";
  clear: both;
  display: table;
  }
  //cara lama
  .clearfix {
  overflow: auto;
  }

//DISPLAY 2 : INLINE-BLOCK
div{
  display: inline; -->
  display: block; -->
  display: inline-block; -->
  //bisa digunain buat navbar
}

//PSEUDO CLASS

div{
  //A pseudo-class is used to define a special state of an element.(state : hover, active, dll)
  //For example, it can be used to:
      //Style an element when a user mouses over it
      //Style visited and unvisited links differently
      //Style an element when it gets focus
}
a:hover {
  color: #FF00FF;
}

//PSEUDO ELEMENT
div{
  //A CSS pseudo-element is used to style specified parts of an element.(part :first-letter, before, after )
  //For example, it can be used to:
      //Style the first letter, or line, of an element
      //Insert content before, or after, the content of an element
}
h1::before {
  //The ::before pseudo-element can be used to insert some content before the content of an element.
  content: url(smiley.gif);
  //semua <h1> setelahnya pasti ada gambar smile
}
::selection {
  //semua yang diblock text akan berwarna merah dan background berwarna biru
  color: red;
  background: yellow;
}

//FLEXBOX



/* ================================================================================================================== */
//CSS 2D TRANSFORMS
div{
  //CSS transforms allow you to translate, rotate, scale, and skew elements.
  //A transformation is an effect that lets an element change shape, size and position.

  -ms-transform: translate(50px, 100px); /* IE 9 */
  -webkit-transform: translate(50px, 100px); /* Safari */
  transform: translate(50px, 100px); //method moves an element from its current position

  -ms-transform: rotate(20deg); /* IE 9 */
  -webkit-transform: rotate(20deg); /* Safari */
  transform: rotate(20deg); //method rotates an element clockwise or counter-clockwise according to a given degree.

  -ms-transform: scale(2, 3); /* IE 9 */
  -webkit-transform: scale(2, 3); /* Safari */
  transform: scale(2, 3); //method increases or decreases the size of an element (according to the parameters given for the width and height).

  -ms-transform: skewX(20deg); /* IE 9 */
  -webkit-transform: skewX(20deg); /* Safari */
  transform: skewX(20deg);method skews an element along the X-axis by the given angle.(skew == mencondongkan)

  -ms-transform: skewY(20deg); /* IE 9 */
  -webkit-transform: skewY(20deg); /* Safari */
  transform: skewY(20deg);

  -ms-transform: skew(20deg, 10deg); /* IE 9 */
  -webkit-transform: skew(20deg, 10deg); /* Safari */
  transform: skew(20deg, 10deg); //skewX() dan skewY()

  -ms-transform: matrix(1, -0.3, 0, 1, 0, 0); /* IE 9 */
  -webkit-transform: matrix(1, -0.3, 0, 1, 0, 0); /* Safari */
  transform: matrix(1, -0.3, 0, 1, 0, 0);
    //The matrix() method combines all the 2D transform methods into one.
    //The parameters are as follow: matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY())
}

//CSS 3D TRANSFORMS
div{
  //CSS allows you to format your elements using 3D transformations.

  -webkit-transform: rotateX(150deg); /* Safari */
  transform: rotateX(150deg); //method rotates an element around its X-axis at a given degree

  -webkit-transform: rotateY(130deg); /* Safari */
  transform: rotateY(130deg); //method rotates an element around its Y-axis at a given degree

  -webkit-transform: rotateZ(90deg); /* Safari */
  transform: rotateZ(90deg); //method rotates an element around its Z-axis at a given degree

  //masih ada banyak: translateX,Y,Z(), scaleX,Y,Z(), dll
}

//CSS TRANSITIONS
div{
  //CSS transitions allows you to change property values smoothly (from one value to another), over a given duration.
  //To create a transition effect, you must specify two things:
    //the CSS property you want to add an effect to
    //the duration of the effect
}
//example 1:
div {
  width: 100px;
  height: 100px;
  background: red;
  -webkit-transition: width 2s, height 4s; /* For Safari 3.1 to 6.0 */
  transition: width 2s, height 4s;
}
div:hover {
  width: 300px;
  height: 300px;
}
//hasil : ketika di hover nggk akan langsung berubah tapi ada transisinya

//transition-timing-function
div{
  //The transition-timing-function property specifies the speed curve of the transition effect.
  //The transition-timing-function property can have the following values:
      //ease - specifies a transition effect with a slow start, then fast, then end slowly (this is default)
      //linear - specifies a transition effect with the same speed from start to end
      //ease-in - specifies a transition effect with a slow start
      //ease-out - specifies a transition effect with a slow end
      //ease-in-out - specifies a transition effect with a slow start and end
      //cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function
}
//example:
div {
  width: 100px;
  height: 100px;
  background: red;
  -webkit-transition: width 2s; /* Safari */
  transition: width 2s;
  transition-timing-function: ease-in;
}

//transition-delay
div{
  //specifies a delay (in seconds) for the transition effect.
  -webkit-transition-delay: 1s; /* Safari */
  transition-delay: 1s;
}

//Transition + Transformation
div {
  width: 100px;
  height: 100px;
  background: red;
  -webkit-transition: width 2s, height 2s, -webkit-transform 2s; /* Safari */
  transition: width 2s, height 2s, transform 2s;
}
div:hover {
  width: 300px;
  height: 300px;
  -webkit-transform: rotate(180deg); /* Safari */
  transform: rotate(180deg);
}

//The CSS transition properties can be specified one by one, like this:
div {
  transition-property: width;
  transition-duration: 2s;
  transition-timing-function: ease;
  transition-delay: 1s;
}
//shorthand for it :
div {
  transition: width 2s ease 1s;
}

//CSS ANIMATION
div{
  //CSS animations allows animation of most HTML elements without using JavaScript or Flash!

}
